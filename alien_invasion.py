import sys

import pygame

from settings import Settings
from ship import Ship
from bullet import Bullet
from alien import Alien

class AlienInvasion:
    """
    General class dedicated to the managing the resources and the way 
    the game works.
    """

    def __init__(self):
        """The game initialization and the setting up its resources."""
        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
        self.settings.screen_width = self.screen.get_rect().width
        self.settings.screen_height = self.screen.get_rect().height
        pygame.display.set_caption("Alien Invasion")

        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()

        self._create_fleet()

    def run_game(self):
        """Start of the main loop of the game"""
        while True:
            self._check_events()
            self.ship.update()
            self._update_bullets()
            self._update_aliens()
            self._update_screen()

    def _check_events(self):
        """
        Reaction for the events generated by the keyboard and 
        the mouse.
        """
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)
            elif event.type == pygame.MOUSEBUTTONDOWN:
                self._check_mouse_buttons(event)

        # Check for the pressed keys that didn't release.
        self._check_pressed_keys()

    def _check_keydown_events(self, event):
        """Reaction for the pressing of the key."""
        if event.key == pygame.K_d or event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_a or event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_q or pygame.K_ESCAPE:
            sys.exit()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()

    def _check_keyup_events(self, event):
        """Reaction for the releasing of the key."""
        if event.key == pygame.K_d or event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_a or event.key == pygame.K_LEFT:
            self.ship.moving_left = False

    def _check_pressed_keys(self):
        """Reaction for the pressed keys that didn't release."""
        keys = pygame.key.get_pressed()

        if keys[pygame.K_d] or keys[pygame.K_RIGHT]:
            self.ship.moving_right = True
        elif keys[pygame.K_a] or keys[pygame.K_LEFT]:
            self.ship.moving_left = True

    def _check_mouse_buttons(self, event):
        """Reaction for the pressing of the left mouse button."""
        if event.button == 1:
            self._fire_bullet()

    def _fire_bullet(self):
        """
        Creation of a new bullet and add him to the group of 
        the bullets.
        """
        if len(self.bullets) < self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet) 

    def _update_bullets(self):
        """
        Updating of the location of the bullets and deletion of 
        the bullets that are invisible.
        """
        # Updating of the location of the bullets.
        self.bullets.update()

        # Deletion of the bullets that are beyond of the screen.
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)

    def _create_fleet(self):
        """
        Creation of the full fleet of the spaceships of the aliens.
        """
        # Creation of the spaceship of the alien and the seting 
        # the number of the spaceships of the aliens that fits in 
        # a row.
        # The distance between the particular spaceships of the aliens 
        # is equal to the width of the rectangle of the spaceship of 
        # the alien.
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        avialable_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = avialable_space_x // (2 * alien_width)

        # Seting how many rows of the spaceships of the aliens fits in 
        # the screen.
        ship_height = self.ship.rect.height
        avialable_space_y = (self.settings.screen_height - 
            (6 * alien_height) - ship_height)
        number_rows = avialable_space_y // (2 * alien_height)

        # Creation of the full fleet of the spaceships of the aliens.
        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number) 

    def _create_alien(self, alien_number, row_number):
        """
        Creation of the spaceship of the alien and placing him in 
        the row.
        """
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
        self.aliens.add(alien)

    def _check_fleet_edges(self):
        """
        Appropriate reaction for the getting of the spaceship of 
        the alien to the edge of the screen.
        """
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        """
        Moving of all fleet of the spaceships of the aliens down and 
        the changing of the direction of the moving of the fleet.
        """
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1

    def _update_aliens(self):
        """
        Check that the fleet of the spaceships of the aliens come 
        across the edge of the screen and next the updating of 
        the location of the all spaceships of the aliens in the fleet.
        """
        self._check_fleet_edges()
        self.aliens.update()

    def _update_screen(self):
        """
        Updating of the view on the screen and the transition to 
        the new screen.
        """
        self.screen.fill(self.settings.bg_color)
        self.ship.blitme()
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        self.aliens.draw(self.screen)

        pygame.display.flip()
        pygame.time.delay(self.settings.time_delay)

if __name__ == '__main__':
    # Setting up of the object of the game and the start-up of 
    # the game.
    ai = AlienInvasion()
    ai.run_game()